openapi: 3.0.0
info:
  title: LPMS-server api
  description: lpms server api with auth
  version: 0.0.1
components:
  securitySchemes:
    bearerAuth:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'

servers:
  - url: http://localhost:5000/api
    description: local server

paths:
  #users
  /user/login:
    post:
      summary: get access token
      tags: [ Auth service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        500:
          description: Some server error

  /user/get-all:
    get:
      summary: get all users
      tags: [ Auth service ]
      responses:
        200:
          description: get all users
        401:
          description: User is not Auth

  /user/create:
    post:
      security:
        - bearerAuth: [ ]
      summary: create a new user (only for manager role)
      tags: [ Auth service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
                roles:
                  type: array
                  items:
                    type: string
                    enum: [ manager, staff ]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/update-password:
    put:
      security:
        - bearerAuth: [ ]
      summary: update password
      tags: [ Auth service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  description: user's id
                password:
                  type: string
                  description: new user password
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/update-roles:
    put:
      security:
        - bearerAuth: [ ]
      summary: update role (only for manager role)
      tags: [ Auth service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  description: user's id
                roles:
                  type: array
                  items:
                    type: string
                    enum: [ manager, staff ]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/logout:
    post:
      security:
        - bearerAuth: [ ]
      summary: logout
      tags: [ Auth service ]
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error
  #end users

  /addresses:
    get:
      summary: get all addresses
      tags: [ Auth service ]
      responses:
        200:
          description: get all users
        401:
          description: User is not Auth

  #storage
  /storage/file:
    post:
      security:
        - bearerAuth: [ ]
      summary: file
      tags: [ Storage service ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /storage/metadata:
    post:
      security:
        - bearerAuth: [ ]
      summary: file
      tags: [ Storage service ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error
  #end storage

  #availability
  /facility/{facilityId}/space/{spaceId}/availability/{date}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get availability by date
      tags: [ Facility service, availability ]
      parameters:
        - in: path
          name: facilityId
          description: The facility Id
          required: true
          schema:
            type: string
        - in: path
          name: spaceId
          description: The facility space Id
          required: true
          schema:
            type: string
        - in: path
          name: date
          description: Availability date formatted as SQL date - "yyyy-MM-dd"
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  numSpaces:
                    type: number
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: add availability of the space at date
      tags: [ Facility service, availability ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numSpaces:
                  type: number
                  description: Number of available spaces to add
              required:
                - numSpaces
      parameters:
        - in: path
          name: facilityId
          description: The facility Id
          required: true
          schema:
            type: string
        - in: path
          name: spaceId
          description: The facility space Id
          required: true
          schema:
            type: string
        - in: path
          name: date
          description: Availability date formatted as SQL date - "yyyy-MM-dd"
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /facility/{facilityId}/space/{spaceId}/availability:
    post:
      security:
        - bearerAuth: [ ]
      summary: add/update default availability of the space
      tags: [ Facility service, availability ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numSpaces:
                  type: number
                  description: Number of available spaces to add
              required:
                - numSpaces
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: spaceId
          required: true
          description: The facility space id
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error
  #end availability

  #modifiers
  /facility/{facilityId}/modifier/{modifierKey}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get modifier of the facility
      tags: [ Facility service, modifiers ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo Add definition of DayOfWeekRateModifer, OccupancyRateModifier, LOSRateModifier
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: add modifier to the facility
      tags: [ Facility service, modifiers ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # @todo Add definition of DayOfWeekRateModifer, OccupancyRateModifier, LOSRateModifier
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: remove modifier from the facility
      tags: [ Facility service, modifiers ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/{itemKey}/{itemId}/modifier/{modifierKey}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get modifier of the item kind of space or otherItems
      tags: [ Facility service, modifiers ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: Type of item
          required: true
          schema:
            type: string
            enum: [ "spaces", "otherItems" ]
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo Add definition of DayOfWeekRateModifer, OccupancyRateModifier, LOSRateModifier
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: add modifier to the facility
      tags: [ Facility service, modifiers ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # @todo Add definition of DayOfWeekRateModifer, OccupancyRateModifier, LOSRateModifier
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: Type of item
          required: true
          schema:
            type: string
            enum: [ "spaces", "otherItems" ]
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: remove modifier of the item kind of space or otherItems
      tags: [ Facility service, modifiers ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: Type of item
          required: true
          schema:
            type: string
            enum: [ "spaces", "otherItems" ]
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: modifierKey
          description: The facility modifier key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
  #end modifiers

  #rules
  /facility/{facilityId}/rule/{ruleKey}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get rule of the facility
      tags: [ Facility service, rules ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ 'notice_required', 'length_of_stay' ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: add rule to the facility
      tags: [ Facility service, rules ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ 'notice_required', 'length_of_stay' ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: remove rule from the facility
      tags: [ Facility service, rules ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ 'notice_required', 'length_of_stay' ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/spaces/{itemId}/rule/{ruleKey}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get rule of the item kind of space or otherItems
      tags: [ Facility service, rules ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ "day_of_week", "occupancy", "length_of_stay" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo Add definition of DayOfWeekRateModifer, OccupancyRateModifier, LOSRateModifier
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: add rule to the facility
      tags: [ Facility service, rules ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ 'notice_required', 'length_of_stay' ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: remove rule of the item kind of space or otherItems
      tags: [ Facility service, rules ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: ruleKey
          description: The facility rule key
          required: true
          schema:
            type: string
            enum: [ 'notice_required', 'length_of_stay' ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
  #end rules

  #activate/deactivate services of facility
  /facility/{facilityId}/activate:
    post:
      security:
        - bearerAuth: [ ]
      summary: activate facility services for facility by id
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/deactivate:
    post:
      security:
        - bearerAuth: [ ]
      summary: deactivate facility services for facility by id
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
  #end activate/deactivate services of facility

  #facility
  /facility:
    get:
      security:
        - bearerAuth: [ ]
      summary: get all facilities
      tags: [ Facility service ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo array of facilities
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get facility metadata
      tags: [ Facility service ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo 1 facility
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    put:
      security:
        - bearerAuth: [ ]
      summary: update the facility Id metadata
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: delete
      tags: [ Facility service ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{salt}:
    post:
      security:
        - bearerAuth: [ ]
      summary: create facility
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: salt
          description: generated salt
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/{itemKey}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get all facility items
      tags: [ Facility service ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: The item key
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo array of items
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/{itemKey}/{itemId}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get item metadata
      tags: [ Facility service ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: The item key
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                # @todo item metadata
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    post:
      security:
        - bearerAuth: [ ]
      summary: create item metadata
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: The item key
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    put:
      security:
        - bearerAuth: [ ]
      summary: update item metadata
      tags: [ Facility service ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: The item key
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
    delete:
      security:
        - bearerAuth: [ ]
      summary: delete item metadata
      tags: [ Facility service ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemKey
          description: The item key
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
  #end facility

  #stubs
  /facility/{facilityId}/stub:
    get:
      security:
        - bearerAuth: [ ]
      summary: get facility stubs
      tags: [ Facility service, stub ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: query
          name: index
          description: index, default = 0
          required: true
          schema:
            type: string
        - in: query
          name: perPage
          description: elements of page, default 10
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/stub/{date}:
    get:
      security:
        - bearerAuth: [ ]
      summary: get all facility stubs by date
      tags: [ Facility service, stub ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: date
          description: date YYYY-MM-DD
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error

  /facility/{facilityId}/space/{itemId}/stub/{date}:
    get:
      security:
        - bearerAuth: [ ]
      summary: all space stubs by date
      tags: [ Facility service, stub ]
      parameters:
        - in: path
          name: facilityId
          description: The facility id
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: The item id
          required: true
          schema:
            type: string
        - in: path
          name: date
          description: date YYYY-MM-DD
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        401:
          description: User is not Auth
        403:
          description: Access denied
        404:
          description: Not Found
        500:
          description: Some server error
  #end stubs
